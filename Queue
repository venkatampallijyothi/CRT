import java.util.*;
import java.util.function.BiFunction;

public class MultiOperationCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BiFunction<Double, Double, Double> add = (a, b) -> a + b;
        BiFunction<Double, Double, Double> subtract = (a, b) -> a - b;
        BiFunction<Double, Double, Double> multiply = (a, b) -> a * b;
        BiFunction<Double, Double, Double> divide = (a, b) -> a / b;

        System.out.println("=== Multi-Operation Calculator with Queue ===");
        System.out.println("Available operations: +  -  *  /");
        System.out.println("You must enter one less operation than the number of numbers.");

        boolean keepRunning = true;

        while (keepRunning) {
            try {
                System.out.print("How many numbers? (minimum 2): ");
                int count = scanner.nextInt();
                if (count < 2) {
                    System.out.println("Please enter at least 2 numbers.");
                    scanner.nextLine(); // Clear buffer
                    continue;
                }

                // Store original numbers in an array for later use
                double[] originalNumbers = new double[count];
                for (int i = 0; i < count; i++) {
                    System.out.print("Enter number " + (i + 1) + ": ");
                    originalNumbers[i] = scanner.nextDouble();
                }
                scanner.nextLine(); // Clear buffer

                System.out.print("Enter " + (count - 1) + " operations separated by space (+ - * /): ");
                String[] operationsInput = scanner.nextLine().trim().split("\\s+");

                if (operationsInput.length != count - 1) {
                    System.out.println("You must enter exactly " + (count - 1) + " operations.");
                    continue;
                }

                // Validate operations
                boolean validOps = true;
                for (String op : operationsInput) {
                    if (!op.matches("[+\\-*/]")) {
                        System.out.println("Invalid operation: " + op);
                        validOps = false;
                        break;
                    }
                }
                if (!validOps) continue;

                // Check division by zero
                for (int i = 0; i < operationsInput.length; i++) {
                    if (operationsInput[i].equals("/") && originalNumbers[i + 1] == 0) {
                        System.out.println("Division by zero detected. Please enter valid numbers.");
                        validOps = false;
                        break;
                    }
                }
                if (!validOps) continue;

                // Use queues for calculation
                Queue<Double> numbers = new LinkedList<>();
                Queue<String> operations = new LinkedList<>();

                // Populate queues from original arrays
                for (double num : originalNumbers) numbers.add(num);
                for (String op : operationsInput) operations.add(op);

                // Calculate result
                double result = numbers.poll();
                while (!operations.isEmpty()) {
                    String op = operations.poll();
                    double nextNum = numbers.poll();

                    switch (op) {
                        case "+":
                            result = add.apply(result, nextNum);
                            break;
                        case "-":
                            result = subtract.apply(result, nextNum);
                            break;
                        case "*":
                            result = multiply.apply(result, nextNum);
                            break;
                        case "/":
                            result = divide.apply(result, nextNum);
                            break;
                    }
                }

                System.out.println("Result: " + result);

                // Print the expression in order
                System.out.print("Expression entered: ");
                for (int i = 0; i < count; i++) {
                    System.out.print(originalNumbers[i]);
                    if (i < operationsInput.length) {
                        System.out.print(" " + operationsInput[i] + " ");
                    }
                }
                System.out.println();

                // Sort and print original numbers
                double[] sortedNumbers = Arrays.copyOf(originalNumbers, originalNumbers.length);
                Arrays.sort(sortedNumbers);
                System.out.println("Sorted numbers: " + Arrays.toString(sortedNumbers));

                // Print even numbers
                System.out.print("Even numbers: ");
                for (double num : sortedNumbers) {
                    if (num == (int) num && ((int) num) % 2 == 0) {
                        System.out.print((int) num + " ");
                    }
                }
                System.out.println();

                // Print odd numbers
                System.out.print("Odd numbers: ");
                for (double num : sortedNumbers) {
                    if (num == (int) num && ((int) num) % 2 != 0) {
                        System.out.print((int) num + " ");
                    }
                }
                System.out.println();

                System.out.print("Do you want to perform another calculation? (yes/no): ");
                String answer = scanner.nextLine();
                if (!answer.equalsIgnoreCase("yes") && !answer.equalsIgnoreCase("y")) {
                    keepRunning = false;
                    System.out.println("Exiting calculator. Goodbye!");
                }

            } catch (Exception e) {
                System.out.println("Invalid input. Please try again.");
                scanner.nextLine(); // Clear buffer
            }
        }

        scanner.close();
    }
}
